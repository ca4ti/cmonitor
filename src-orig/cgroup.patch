--- src-orig/njmon_linux_v22.c	2019-03-31 16:41:28.000000000 +0200
+++ src/njmon_linux_v22.c	2019-04-06 12:27:47.098408050 +0200
@@ -85,6 +85,28 @@
 char hostname[256] = { 0 };
 char shorthostname[256] = { 0 };
 
+
+/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+ * PATCH FOR CGROUP AWARENESS
+ * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
+extern int cgroup_found;
+extern void cgroup_init();
+extern int cgroup_is_allowed_cpu(int cpu);
+
+int exit_flag = 0;
+void exit_interrupt(int signum)  // another addition compared to original source to produce correct JSON on SIGTERM
+{
+	switch(signum) {
+	case SIGTERM:
+		exit_flag = 1;
+		break;
+	}
+}
+/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+ * PATCH FOR CGROUP AWARENESS
+ * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
+
+
 void   interrupt(int signum)
 {
 	switch(signum) {
@@ -984,6 +1006,7 @@
 
 	if(!strncmp(line,"cpu", 3) ) { 
 	    if(!strncmp(line,"cpu ", 4) ) {
+		if(!cgroup_found) {
 		cpu_total=1;
                	count = sscanf(&line[4],  /* cpu USER */
                    "%lld %lld %lld %lld %lld %lld %lld %lld %lld %lld",
@@ -1016,6 +1039,7 @@
 		total_cpu.steal = steal;
 		total_cpu.guest = guest;
 		total_cpu.guestnice = guestnice;
+		} //else: do not report the TOTAL cpus if cgroup-mode is on: we report only the stats of CPUs in current cgroup
 	    }  else {
 		cpu_total=0;
             	count = sscanf(&line[3],  /* cpuNNN USER*/
@@ -1027,6 +1051,8 @@
 			max_cpuno = cpuno;
 		if(cpuno >= MAX_LOGICAL_CPU) 
 			continue;
+		if(!cgroup_is_allowed_cpu(cpuno))
+			continue;
 		if(print) {
 			sprintf(label,"cpu%d", cpuno);
 			psub(label);
@@ -1665,6 +1691,8 @@
     while(fgets(buf, 1024, fp) != NULL) {
             buf[strlen(buf) - 1] = 0;     /* remove newline */
 		/* moronically cpuinfo file format has Tab characters !!! */
+
+            int processor_allowed = cgroup_is_allowed_cpu(processor);
             if (!strncmp("processor", buf, strlen("processor"))) {
 		if(processor != 0)
 		    psubend(0);
@@ -1675,39 +1703,39 @@
 	    }
             if (!strncmp("clock", buf, strlen("clock"))) { /* POWER ONLY */
 	        sscanf(&buf[9], "%lf", &value);
-                pdouble("mhz_clock",value);
+	        if (processor_allowed) pdouble("mhz_clock",value);
 		power_nominal_mhz = value;  /* save for sys_device_system_cpu() */
 		ispower = 1;
             }
             if (!strncmp("vendor_id", buf, strlen("vendor_id"))) {
-                pstring("vendor_id",&buf[12]);
+        	    if (processor_allowed) pstring("vendor_id",&buf[12]);
             }
             if (!strncmp("cpu MHz", buf, strlen("cpu MHz"))) {
 	        sscanf(&buf[11], "%lf", &value);
-                pdouble("cpu_mhz",value);
+	        if (processor_allowed) pdouble("cpu_mhz",value);
             }
             if (!strncmp("cache size", buf, strlen("cache size"))) {
 	        sscanf(&buf[13], "%lf", &value);
-                pdouble("cache_size",value);
+	        if (processor_allowed) pdouble("cache_size",value);
             }
             if (!strncmp("physical id", buf, strlen("physical id"))) {
 	        sscanf(&buf[14], "%d", &int_val);
-                plong("physical_id",int_val);
+	        if (processor_allowed) plong("physical_id",int_val);
             }
             if (!strncmp("siblings", buf, strlen("siblings"))) {
 	        sscanf(&buf[11], "%d", &int_val);
-                plong("siblings",int_val);
+	        if (processor_allowed) plong("siblings",int_val);
             }
             if (!strncmp("core id", buf, strlen("core id"))) {
 	        sscanf(&buf[10], "%d", &int_val);
-                plong("core_id",int_val);
+	        if (processor_allowed) plong("core_id",int_val);
 	    }
             if (!strncmp("cpu cores", buf, strlen("cpu cores"))) {
 	        sscanf(&buf[12], "%d", &int_val);
-                plong("cpu_cores",int_val);
+	        if (processor_allowed) plong("cpu_cores",int_val);
             }
             if (!strncmp("model name", buf, strlen("model name"))) {
-                pstring("model_name",&buf[13]);
+        	    if (processor_allowed) pstring("model_name",&buf[13]);
             } 
             if (!strncmp("timebase", buf, strlen("timebase"))) { /* POWER only */
 		ispower = 1;
@@ -2111,6 +2139,7 @@
 	char	datastring[256];
 	pid_t 	childpid;
 	int   *crashptr = NULL;
+	int cgroup_mode = 0;
 
 	FUNCTION_START;
 	s = getenv("NJMON_SECRET");
@@ -2123,11 +2152,12 @@
 	if(s != 0) 
 		strncpy(secret, s, 128);
 
+	signal(SIGTERM, exit_interrupt);
 	signal(SIGUSR1, interrupt);
 	signal(SIGUSR2, interrupt);
 
 
-   while (-1 != (ch = getopt(argc, argv, "?hfm:SMOs:c:kdi:p:X:x"))) {
+   while (-1 != (ch = getopt(argc, argv, "?hfm:SMOs:c:kdi:p:X:x:C"))) {
         switch (ch) {
         case '?': 
         case 'h': 
@@ -2178,6 +2208,9 @@
 	case 'x':
 		print_child_pid = 1;
 		break;
+	case 'C':
+		cgroup_mode = 1;
+		break;
 	}
     }
 #ifndef NOREMOTE
@@ -2310,6 +2343,8 @@
 #ifndef NOGPFS
     gpfs_init();
 #endif /* NOGPFS */
+    if (cgroup_mode)
+	cgroup_init();
 
     gettimeofday(&tv, 0);
     current_time = (double)tv.tv_sec + (double)tv.tv_usec * 1.0e-6;
@@ -2348,7 +2383,10 @@
 	proc_version();
 	lscpu();
 	proc_stat(elapsed,PRINT_TRUE);
+	if (!cgroup_mode)
 	proc_cpuinfo();
+	//else: do not list all CPU informations when cgroup mode is ON: don't put information
+	//      for CPUs outside current cgroup!
 	read_data_number("meminfo");
 	read_data_number("vmstat");
 	proc_diskstats(elapsed,PRINT_TRUE);
@@ -2362,12 +2400,15 @@
 #endif /* NOGPFS */
 
         DEBUG praw("Sample");
-        psampleend(loop == (maxloops -1));
+        psampleend(loop == (maxloops -1) || exit_flag);
         push();
 	/* debbuging - uncomment to crash here!
 	*crashptr = 42;
 	*crashptr = 42;
 	*/
+
+        if (exit_flag)
+            break; // graceful exit allows to produce a valid JSON on SIGTERM signals!
     } 
     /* finish-of */
     if(mode == ONE_LEVEL) {
